#!/usr/bin/env bash
COWSAY=$(which cowsay 2>/dev/null)
LOGFILE=containnsm.log

# Globals
ARGC=$#
SUBCOMMAND="$1"
shift 1
ARGV="$@"
PARAMS="${ARGV%%--*}"
CMDLINE="${ARGV#*--}"
ORG=opennsm
USER=opennsm

normal="$(tput sgr0)"
bold="$(tput bold)"
underline="$(tput smul)"
yellow="$(tput setaf 3)"
redf="$(tput setaf 1)"
magentaf="$(tput setaf 5)"
whitef="$(tput setaf 7)"

N="${normal}"
B="${bold}"
U="${underline}"
Y="${yellow}"
RF="${redf}"
RB="${redb}"
GF="${greenf}"
GB="${greenb}"
MF="${magentaf}"
WF="${whitef}"

usage(){
cat <<EOF

${MF}ContainNSM:${N} ${Y}Easily utilize the ContainNSM docker image collection${N}

      ${B}Subcommands:${N}
        ${Y}help${N}            Help (this message)
        ${Y}new${N}             Create new directory with Dockerfile template
        ${Y}build${N}           Build an image from version directory
        ${Y}groupbuild${N}      Build all image versions from tool directory
        ${Y}list${N}            List images in repository
        ${Y}listinstalled${N}   List installed images
        ${Y}run${N}             Create a container from image
        ${Y}grouprun${N}        Create a group of containers
        ${Y}last${N}            Attach to most recently used image with shell

      ${B}Subcommand options:${N}
        new ${U}<dir>${N}                  Directory to create
        build|groupbuild ${U}<dir>${N}     Directory to Dockerfile
        help                       Help
        list|listinstalled ${U}[<dir>]${N} List available images by tool
        run|grouprun ${U}[options]${N}
          ${WF}-i${N}                       Share network interfaces with host
          ${WF}-r${N} ${U}<file>${N}                Read in dir(s)/file(s) (sep: ,) e.g. \`\`-r /test.pcap:/opt/test.pcap''
          ${WF}-w${N} ${U}<dir|file>${N}            Write out data to dir(s)/file(s) (sep: ,) e.g. \`\`-w /test:/tmp''
          ${WF}-u${N} ${U}<user>${N}                User in container (def: opennsm)
          ${WF}-C${N} ${U}<dir>${N}                 Set working directory in container
          ${WF}-I${N} ${U}<image>${N}               Docker image e.g. \`\`-I bro:2.4.1''
          ${WF}-c${N} ${U}<num>${N}                 Number of versions to iterate through (grouprun only)
          ${WF}-q${N}                       Quiet mode
          ${WF}--${N} ${U}[command..]${N}           Arguments passed to container e.g. \`\`-- bash''

      ${B}Examples:${N}
            $0 build bro/2.4.1
            $0 run -I tcpdump -r /pcaps/ctf.pcap -- tcpdump -nr ctf.pcap -c 10
            $0 run -I tcpdump:4.7.4 -i -- tcpdump -ni eth0

${B}Usage:${N} ${MF}$0${N} ${Y}sub${N} [ { ${U}dir${N} } | [{${WF}-I${N} ${U}image${N}} [${WF}-r${N} ${U}pcap${N}] [${WF}-w${N} ${U}dir|file${N}] -- [${U}command${N}]]]
EOF
return $?
}

die(){
  if [ -f ${COWSAY:-none} ]; then
    $COWSAY -d "$*" >&2
  else
    printf "${RF}$*${N}\n" >&2
  fi
  exit 1
}

hi(){
  if [ -f ${COWSAY:-none} ]; then
    $COWSAY "$*" >&2
  else
    printf "${WF}$*${N}\n" >&2
  fi
  return 0
}

argcheck(){
  local num
  num="$1"
  [[ $ARGC -lt $num ]] && die "Missing arguments! Use \`\`$0 help'' for help."
}

quiet_mode(){
  exec 2> /dev/null
}

check_status(){
  local status_code
  status_code="$1"
  exit $status_code
}

trap 'die "Trap recieved, exiting...";' 1 2 3 20

options(){
  # Check for arguments
  argcheck 1

  case $SUBCOMMAND in
    help)           usage;                   check_status $?;;
    new)            new "$PARAMS";           check_status $?;;
    build)          build "$PARAMS";         check_status $?;;
    groupbuild)     groupbuild "$PARAMS";    check_status $?;;
    list)           list "$PARAMS";          check_status $?;;
    listinstalled)  listinstalled "$PARAMS"; check_status $?;;
    last)           last "$PARAMS";          check_status $?;;
  esac

  if [[ "$SUBCOMMAND" =~ run|grouprun ]]; then
    while getopts "hc:C:ir:I:qw:u:" OPTION $PARAMS
    do
      case $OPTION in
        h) usage;;
        C) WORKDIR="$OPTARG";;
        i) NET="true";;
        c) COUNT="$OPTARG";;
        r) FILES="$OPTARG";;
        u) USER="$OPTARG";;
        w) WRITE=1; OUT="$OPTARG";;
        I) IMAGE="${OPTARG}";;
        q) quiet_mode;;
        \?) die "Invalid option: -$OPTARG" >&2;;
      esac
    done
    return 0
  fi
  die "Invalid option, please see help for subcommands: \`\`$0 help''"
}

is_docker(){
  which docker 1>/dev/null 2>/dev/null || die "Docker not found, check PATH"
}

test_paths(){
  printf "${Y}Mount:${N} ${WF}Host: ${N}%s\n    ${MF}->${N} ${WF}Container: ${N}%s\n" "$OUT" "$OUT"  >&2
  printf "${Y}Cwd:${N}\t%s\n" "$WORKDIR" >&2
  printf "${Y}HostNet:${N}%6s\n" "${NET}" >&2

  [[ "$OUT"     = /* ]]     || die "Error: $OUT is not an absolute path!"
  [[ "$WORKDIR" = /* ]]     || die "Error: $workdir is not an absolute path!"
  [[ "$FILES"   = "none" ]] && return 0
  is_path "$FILES"
  return 0
}

config(){
  local cwd
  home=/home/${ORG}
  OUT="${OUT:-$PWD}"
  FILES="${FILES:-none}"

  ## Make some sane relative path guesses for user convenience
  # If multiple paths are in FILES and ``-C'' is not used, WORKDIR will be empty, use PWD from host then
  [[ $WORKDIR ]] || WORKDIR="$PWD"
  # If ``-w'' is specified and no files in FILES, set to opennsm user's home dir in container
  [[ "$WRITE" -eq 1 ]] || { [[ "$FILES" = "none" ]] && WORKDIR="$home"; }

  ## Configure networking
  # If ``-i'' is specified set NET to true, handled in run()
  [[ "$NET" == "true" ]] || NET="false"
}

is_repo(){
  local sub
  sub="$1"
  [[ -f "$PWD"/.git/config ]] || die "$0 $sub must be run from containsnm repo"
}

is_dir(){
  local dir
  local print
  dir="$1"
  if [[ "$dir" ]]; then
    [[ -d "$dir" ]] || die "Tool directory $dir doesn't exist"
  fi
}

is_path(){
  local paths
  paths="$1"
  for i in ${paths/,/ }
  do
    path=${i%%:*}
    [[ "$path"   = /* ]] || die "Error: $path is not an absolute path!"
    { [[ -f $path ]] || [[ -d $path ]]; } || die "Error: $path does not exist"
  done
}

list(){
  local dir
  local print
  is_repo $FUNCNAME
  dir="${1%/}"
  print="$2"
  is_dir "$dir"
  [[ "$SUBCOMMAND" == "list" ]] && printf "Repo/Image:Tag%32s\n" "Dir/Dir" >&2
  for image in ${dir:-*}/*
  do
    tag=${image#*/}
    [[ "$tag" =~ [a-zA-Z] ]] && continue
    ! [[ $print ]] && printf "opennsm/${image/\//:}%30s\n" "$image"
    [[ $print ]] && printf "opennsm/${image/\//:}\n"
  done
  return $?
}

listinstalled(){
  local tool
  tool="${1%/}"
  if [[ $tool ]]; then
    docker images -f "label=program=$tool"
  else
    docker images -f "label=organization=$ORG"
  fi
  return $?
}

build(){
  local file
  local image
  local tag
  is_repo $FUNCNAME
  dir=$1
  [[ "$dir" =~ .+/.+/.+ ]] && dir=$(dirname "$dir")
  [[ -d $dir ]] || die "$dir is not a directory or doesn't exist"
  [[ -f $dir/Dockerfile ]] || die "No Dockerfile in $dir"
  [[ $dir = */*/* ]] && dir=${dir%/*}
  image="${dir%/*}"
  tag="${dir#*/}"
  name="${image}:${tag}"
  docker build -t ${ORG}/${name} - < $dir/Dockerfile
  [[ $? -ne 0 ]] && die "Build failed, check your Dockerfile"
  hi "Image created - try \`\`${MF}./containnsm run -I ${name} -- bash${N}'' to test it out"
}

groupbuild(){
  local dir
  local tag
  local version
  dir="${1%/*}"
  [[ -d "$dir" ]] || die "$dir is not a tool directory or doesn't exist"
  for version in $dir/*;
  do
    tag=${version#*/}
    [[ -d "$version" ]]      || continue
    [[ "x$tag" = "x" ]] && continue
    build $version
  done
  hi "$FUNCNAME complete"
}

is_image(){
  local image
  image="$1"
  [[ "${image}" ]] || die "No image specified, try \`\`-I <image>''"
}

format_image(){
  image=${image//opennsm\/}  # Remove repo if given, we add it below
  image="${image/\//:}"      # Put path in Docker image format by sub last / with :
  image=${image%/}           # Remove any trailing forward slash
  image=${image%:}           # Remove any trailing colons
  ## Find the latest image version when latest is assumed because no tag
  { [[ "$image" =~ latest ]] || ! [[ "$image" =~ :|/ ]]; } &&  latest "$image"
  image="$ORG/$image"       # opennsm + '/' + $image
}

config_mounts(){
  local files
  local mount
  local perm
  files="$1"
  perm="$2"
  for i in ${files//,/ }
  do
    [[ "$i" =~ : ]]   || i="${i}:${i}" # Syntax should be src_mnt:dst_mnt
    [[ "$i" =~ :${perm} ]] || i="${i}:${perm}"   # Add read-only permissions
    i="-v $i"                          # Add volume option to pass to docker
    mount="$i $mount"
  done
  echo "$mount"
}

run(){
  local files
  local cmdline
  local image
  local correct_format
  local image_name_contains_opennsm
  local non_opennsm_image_specified
  correct_image_format=0
  image_name_contains_opennsm=0
  non_opennsm_image_specified=0
  files="$1"
  cmdline="$2"
  image="${3:-$IMAGE}"       # Satisfy image presence when grouprun()

  # Be friendly by supporting different ways to specify the image e.g.
  # -I bro
  # -I bro:latest
  # -I opennsm/bro
  # -I opennsm/bro:latest
  # -I opennsm/bro/latest
  # This happens when format_image() is called otherwise friendliness doesn't apply

  [[ "$image" =~ [a-z0-9_.-]+/[a-z0-9_.-]+:[a-z0-9_.-] ]] && correct_image_format=1
  [[ "$image" =~ opennsm ]] && image_name_contains_opennsm=1
  [[ $correct_image_format -eq 1 ]] && [[ $image_name_contains_opennsm -eq 0 ]] && non_opennsm_image_specified=1
  [[ $non_opennsm_image_specified -eq 1 ]] || format_image

  # Make sure arguments are passed to the container
  [[ "$ARGV" =~ '--' ]] || die "Error: Missing container arguments e.g. \`\`$0 ... -- bash''"
  # Use the host network if -i was specified
  [[ "$NET" == "true" ]] && NET="--net=host" || unset NET
  # Setup custom options for some images that require them to be useful
  run_options "$image" || unset $OPTS

  # Get repo (tool) name
  repo_tag=${image#*/}
  repo=${repo_tag%:*}

  # Configure file/dir mount syntax
  [[ "$files" == "none" ]] || mount="$(config_mounts "$files" ro)"
  out="$(config_mounts "$OUT" rw)"

  # Create container
  printf "${Y}Image:${N}\t%s %s\n" "$image" "$latest" >&2
  eval docker run -it -e "HOSTNAME=${repo}" --rm "$OPTS" "$NET" -u "$USER" "$mount" "$out" -w "$WORKDIR" "$image" "$cmdline"
  return $?
}

run_options(){
  local image
  image="$1"
  # Some images require specific settings, set them here
  [[ "$image" =~ 'netsniff-ng' ]] && OPTS="--privileged=true"
  [[ "$OPTS" ]] || return 0
}

latest(){
  local name
  name="${1%:*}"    # Trim trailing colon
  name="${name#*/}" # Trim organization

  # Only sort on versioned numbered tool directories
  [[ "$name" =~ debian ]] && return 0

  # Skip this whole thing if we're not in the repo
  if [[ -f "$PWD"/.git/config ]]; then
    # If tool directory doesn't exist then don't get latest version
    if [[ -d $name ]]; then
      cd $name
      latest=$(for dir in *; do printf "$dir\n"; done | tail -n 1)
      cd $OLDDIR
      image="$name:$latest"
      latest="(${WF}latest${N})"
    fi
  fi
}

grouprun(){
  local image
  local count
  count=0
  image="${IMAGE}"
  image="${image%:*}"
  image="${image%%/*}"
  group=$(list "${image/opennsm\//}" "listrepo")
  printf "${WF}I will attempt to pull missing images...${N}\n" >&2
  for tool in $group; do
    [[ $COUNT ]] && [[ $count -ge $COUNT ]] && break
    count=$((count+1))
    run "${FILES}" "$CMDLINE" "${tool#*/}"
  done
  hi "$FUNCNAME of ${COUNT:-all} versions complete"
}

template(){
  local dir
  dir="$1"
  hi "Replace :TEXT: at $dir placeholders with your settings"
cat <<EOF
# VERSION 0.1
FROM      opennsm/debian
MAINTAINER :FIRST: :LAST: <:EMAIL:>

# Metadata
LABEL organization=opennsm
LABEL program=:TOOL:

# Specify container username e.g. training, demo
ENV VIRTUSER opennsm
# Specify program
ENV PROG :TOOL:
# Specify source extension
ENV EXT tar.gz
# Specify Bro version to download and install (e.g. tool-2.3.1)
ENV VERS :VERSION:
# Install directory
ENV PREFIX /opt/:TOOL:
# Path should include prefix
ENV PATH /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:\$PREFIX/bin

# Install dependencies
RUN apt-get update -qq
RUN apt-get install -yq :DEPENDENCIES: --no-install-recommends

# Compile and install tool
USER \$VIRTUSER
WORKDIR /home/\$VIRTUSER
RUN wget --no-check-certificate https://www.:TOOL:.org/downloads/\$PROG-\$VERS.\$EXT && tar -xzf \$PROG-\$VERS.\$EXT
WORKDIR /home/\$VIRTUSER/\$PROG-\$VERS
RUN ./configure --prefix=\$PREFIX && make
USER root
RUN make install
RUN chmod u+s \$PREFIX/\$PROG

# Cleanup
RUN rm -rf /home/\$VIRTUSER/\$PROG-\$VERS

# Environment
WORKDIR /home/\$VIRTUSER
USER opennsm
EOF
}

new(){
  local dir
  dir="$1"
  [[ "$dir" ]] || die "No directory argument given, try \`\`./containnsm new <tool>/<version>''"
  [[ -d "$dir" ]] && die "Tool directory $dir already exists"
  mkdir -p "$PARAMS" || die "Error creating $dir directory"
  template "$dir" > $PARAMS/Dockerfile || { rmdir -p $PARAMS && die "Template generation failed (write permissions?)"; }
  return $?
}

last(){
  local image
  is_docker
  image=$(docker images -q | head -n 1)
  docker run -it "$image" bash
  return $?
}

main(){
  options
  # Test if image was given
  is_image "$IMAGE"
  config
  # Check for absolute paths and file existence
  test_paths
  # Check for Docker
  is_docker

  if [[ "$SUBCOMMAND" == "run" ]]; then
    run "${FILES}" "$CMDLINE" || exit 1
  fi

  if [[ "$SUBCOMMAND" == "grouprun" ]]; then
    grouprun "$PARAMS"
  fi
}

main
